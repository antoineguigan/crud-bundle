<?php
/*
 * This file is part of the Qimnet CRUD Bundle.
 *
 * (c) Antoine Guigan <aguigan@qimnet.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */
namespace Qimnet\CRUDBundle\Tests\Controller;
use Qimnet\CRUDBundle\Controller\CRUDController;
/**
 * Generated by PHPUnit_SkeletonGenerator 1.2.0 on 2013-03-27 at 19:35:16.
 */
class CRUDControllerTest extends \PHPUnit_Framework_TestCase
{
    protected $CRUDRequest;
    protected $controller;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->CRUDRequest = $this->getMock('Qimnet\CRUDBundle\HTTP\CRUDRequestInterface');
        $this->controller = new CRUDController();
        $this->controller->setCRUDRequest($this->CRUDRequest);
    }
    protected function setWorker($worker=true)
    {
        if ($worker===true) {
            $worker = $this->getMock('Qimnet\CRUDBundle\Controller\Worker\CRUDControllerWorkerInterface');
        }
        $this->CRUDRequest
                ->expects($this->any())
                ->method('getWorker')
                ->will($this->returnValue($worker));

        return $worker;
    }
    /**
     * @expectedException \Symfony\Component\HttpKernel\Exception\NotFoundHttpException
     */
    public function testInexistingConfig()
    {
        $this->setWorker(null);
        $this->controller->indexAction('bogus');
    }

    public function testIndexAction()
    {
        $worker = $this->setWorker();
        $worker
                ->expects($this->once())
                ->method('indexAction')
                ->with($this->equalTo('page'), $this->equalTo('sort_field'), $this->equalTo('sort_direction'))
                ->will($this->returnValue('success'));
        $this->assertEquals('success', $this->controller->indexAction('page', 'sort_field', 'sort_direction'));
    }

    public function testNewAction()
    {
        $worker = $this->setWorker();
        $worker
                ->expects($this->once())
                ->method('newAction')
                ->will($this->returnValue('success'));
        $this->assertEquals('success', $this->controller->newAction());
    }

    public function testBatchAction()
    {
        $worker = $this->setWorker();
        $worker
                ->expects($this->once())
                ->method('batchDeleteAction')
                ->will($this->returnValue('success'));
        $this->assertEquals('success', $this->controller->batchAction('delete'));
    }

    /**
     * @expectedException \RuntimeException
     */
    public function testUndefinedBatchAction()
    {
        $worker = $this->setWorker();
        $this->controller->batchAction('bogus');
    }
    public function testDeleteAction()
    {
        $worker = $this->setWorker();
        $worker
                ->expects($this->once())
                ->method('deleteAction')
                ->with($this->equalTo('id'))
                ->will($this->returnValue('success'));
        $this->assertEquals('success', $this->controller->deleteAction('id'));

    }

    public function testFilterAction()
    {
        $worker = $this->setWorker();
        $worker
                ->expects($this->once())
                ->method('filterAction')
                ->will($this->returnValue('success'));
        $this->assertEquals('success', $this->controller->filterAction('default'));
    }

    public function testEditAction()
    {
        $worker = $this->setWorker();
        $worker
                ->expects($this->once())
                ->method('editAction')
                ->with($this->equalTo('id'))
                ->will($this->returnValue('success'));
        $this->assertEquals('success', $this->controller->editAction('id'));
    }
    public function testShowAction()
    {
        $worker = $this->setWorker();
        $worker
                ->expects($this->once())
                ->method('showAction')
                ->with($this->equalTo('id'))
                ->will($this->returnValue('success'));
        $this->assertEquals('success', $this->controller->showAction('id'));
    }
    public function testFormAction()
    {
        $worker = $this->setWorker();
        $worker
                ->expects($this->once())
                ->method('formAction')
                ->will($this->returnValue('success'));
        $this->assertEquals('success', $this->controller->formAction('default'));
    }
}
